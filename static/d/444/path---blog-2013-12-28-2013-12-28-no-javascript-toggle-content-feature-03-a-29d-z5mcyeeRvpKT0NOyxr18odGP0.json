{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"91240f24-2874-548d-95b8-e885204fb649","excerpt":"I wanted to post a quick tutorial about a method I use to create quick toggle links to areas of content without using javascript. It’s…","html":"<p>I wanted to post a quick tutorial about a method I use to create quick toggle links to areas of content without using javascript. It’s pretty neat, what we do is, we use a ‘checkbox’ form element, its label, and a piece of content, and we stack them all on top of each other.</p>\n<p>Your html will look like this</p>\n<p>{% highlight html linenos %}\n<input type=\"checkbox\" value=\"selected\" id=\"toggle-input\" class=\"toggle-input\">\n<label for=\"toggle-input\">toggle</label></p>\n<div class=\"toggle-content\">\n\tthe content you want to show / hide\n</div>\n{%endhighlight%}\n<p>Once you have this structure, you’ll be able to use this CSS to create the toggle effect.</p>\n<p>{% highlight css linenos %}\n.toggle-input {\ndisplay: none;\n}\n.toggle-content {\nmax-height: 0;\noverflow: hidden;\ntransition: .3s ease max-height;\n}\n.toggle-input:checked ~ .toggle-content {\nmax-height: 1000px; // this number needs to be bigger than its content\n}\n{% endhighlight %}</p>\n<p>What this CSS does is hide the actual checkbox element, leaving just the label. Clicking the label checks the box, and our sibling selector of ’~’ tells our .toggle-content div that when the input is checked, expand it’s max height.</p>\n<p><strong>note</strong> — the max height css is a trick. You can’t animate the ‘height’ attribute from 0 to auto, so to get around this, we set the max-height to 0, and the overflow to hidden. Then, we can animate the max-height attribute, giving us the desired ‘slide’ effect.</p>\n<p>You can also style the label specifically if the input is checked like so:</p>\n<p>{%highlight css linenos%}\n.toggle-input:checked + label {\n// checked label styles\n}\n{%endhighlight%}</p>\n<p>I still need to do some cross browser testing, but sibling CSS selectors work in IE8 and above. I created an object from this solution and use it quite often as I develop user interfaces. You can see a working example from my <a href=\"http://codepen.io/bollskis\" title=\"Drew Bolles&#x27; codepen\">codepen</a> below.</p>\n<p data-height=\"400\" data-theme-id=\"0\" data-slug-hash=\"aqykc\" data-user=\"bollskis\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/bollskis/pen/aqykc'>No Javascript Toggle</a> by Drew Bolles (<a href='http://codepen.io/bollskis'>@bollskis</a>) on <a href='http://codepen.io'>CodePen</a></p>\n<script async src=\"//codepen.io/assets/embed/ei.js\"></script>","frontmatter":{"title":"A no-javascript toggle content feature","date":"2013-12-28 12:00:00 +0200"}}},"pageContext":{"slug":"/blog/2013/12/28/2013-12-28-no-javascript-toggle-content-feature/","previous":{"fields":{"slug":"/blog/2013/12/27/2013-12-27-why-you-should-be-using-sass-extends/"},"frontmatter":{"title":"How you should be using Sass extends"}},"next":{"fields":{"slug":"/blog/2014/09/01/2014-09-01-joining-chapter-three/"},"frontmatter":{"title":"I'm joining Chapter Three!"}}}}