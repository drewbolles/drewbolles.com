{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"bc61215c-8bdb-52a1-af6a-9a6b40983327","excerpt":"I often want to print the output of an Entity Reference field somewhere - a page template, a complicated node template, or in a custom…","html":"<p>I often want to print the output of an Entity Reference field somewhere - a page template, a complicated node template, or in a custom module that is organizing data. In Drupal 7, you could do this a few ways and I usually used <code class=\"language-text\">field_get_items</code> and <code class=\"language-text\">field_view_field</code>. With Drupal 8 it’s a bit different, there’s now a view method that accepts view mode arguments. Let’s dive into some code</p>\n<h3>Printing the value of a field</h3>\n<p>Drupal 7:</p>\n<p>{% highlight php startinline=true linenos %}\n$node = node<em>load(12); // random NID\n$field</em>items = field<em>get</em>items(‘node’, $node, ‘field<em>entity</em>reference’);\n$field<em>output = field</em>view<em>value(‘node’, $node, ‘field</em>entity<em>reference’, $field</em>items[0], array(‘type’ => ‘default’));\n{% endhighlight %}</p>\n<p>or</p>\n<p>{% highlight php startinline=true linenos %}\n$node = node<em>load(12); // random NID\n$field</em>output = field<em>view</em>field(‘node’, $node, ‘field<em>entity</em>reference’, array(‘type’ => ‘default’));\n{% endhighlight %}</p>\n<p>Drupal 8:</p>\n<p>{% highlight php startinline=true linenos %}\n$node = \\Drupal::entityManager()->getStorage(‘node’)->load(12); // random NID\n$field<em>output = entity</em>view($node->get(‘field<em>entity</em>reference’)->entity, ‘default’);\n{% endhighlight %}</p>\n<p>As you can see, it’s similar. Grabbing the node is much more concise in Drupal 7, but constructing the field output is much more straight forward in Drupal 8. We’re taking advantage of the entity_view function which wraps the view() method that is part of entities and fields. Granted, we’re not testing for the existence of the field, or the data. A more complete example would be:</p>\n<p>Drupal 8:</p>\n<p>{% highlight php startinline=true linenos %}\n$node = \\Drupal::entityManager()->getStorage(‘node’)->load(12); // random NID\n// Test if this node has our field\nif ($node->hasField(‘field<em>entity</em>reference’)) {\n$entity<em>ref = $node->get(‘field</em>entity<em>reference’);\n// if our field has data\nif ($entity</em>ref->count() > 0) {\n$output = entity<em>view($entity</em>ref->entity, ‘default’);\n}\n}\n{% endhighlight %}</p>\n<p>Now we’re able to output our referenced entities wherever they need to be output!</p>","frontmatter":{"title":"Printing an Entity Reference field programmatically in Drupal 8","date":"2016-01-14 11:033:00 +0200"}}},"pageContext":{"slug":"/blog/2016/01/14/2016-01-14-printing-entity-reference-field-programmatically-drupal-8/","previous":{"fields":{"slug":"/blog/2016/01/13/2016-01-13-getting-started-with-drupal-8-theming/"},"frontmatter":{"title":"Getting started with Drupal 8 Theming"}},"next":{"fields":{"slug":"/blog/2016/01/14/2016-01-14-introducing-gotham-drupal-8-starter-theme/"},"frontmatter":{"title":"Introducing Gotham, a Drupal 8 starter theme"}}}}