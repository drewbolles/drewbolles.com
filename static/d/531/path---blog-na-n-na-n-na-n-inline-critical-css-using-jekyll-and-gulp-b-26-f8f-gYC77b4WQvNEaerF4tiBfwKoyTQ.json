{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog","author":"Kyle Mathews"}},"markdownRemark":{"id":"b7bc1025-9b97-5ebb-af58-4999301c7122","excerpt":"If you’re familiar with critical CSS and its impact on web performance, you also know it’s not the simpliest thing to work with.  Google’s…","html":"<p>If you’re familiar with critical CSS and its impact on web performance, you also know it’s not the simpliest thing to work with. <a href=\"https://developers.google.com/speed/pagespeed/insights/\">Google’s pagespeed insights</a> recommends that you inline any critical, render blocking content to increase performance, which can be tricky. I’ve managed to set up this up using Jekyll and Gulp to generate and include my critical CSS, and in this post I’ll walk you through how I did that.</p>\n<h2>Requirements</h2>\n<p>For this you’ll need a few things.</p>\n<ul>\n<li>A <a href=\"http://jekyllrb.com\">Jekyll</a> site</li>\n<li><a href=\"http://nodejs.org\">Node.js</a> and npm</li>\n<li><a href=\"http://sass-lang.com\">Sass</a></li>\n<li><a href=\"http://gulpjs.com\">Gulp</a></li>\n<li><a href=\"https://github.com/filamentgroup/loadCSS\">loadCSS</a></li>\n<li>Command line familiarity</li>\n</ul>\n<h2>The set up</h2>\n<p>The process for inlining your critical CSS isn’t complicated, it’s just specific. There are two parts <strong>1)</strong> include the critical CSS at the top of your document head in <code class=\"language-text\">&lt;style&gt;</code> tags <strong>2)</strong> asychronously load the full CSS file in the footer. Using Gulp and Jekyll together makes this suprisingly simple.</p>\n<h3>Gulp</h3>\n<p>Once you have node installed on your machine, you can install Gulp locally to manage the build. Make sure you are in your site root <code class=\"language-text\">$ cd /path/to/site</code> then run <code class=\"language-text\">$ npm init</code>. Fill out the fields as they make sense, you can mostly hit enter. Next we need a few node modules to get things cooking. Namely, gulp, gulp-sass, critical, gulp-watch. Non-essential, but nice-to-haves are gulp-autoprefixer, and gulp-sourcemaps.</p>\n<p>You can install all of them by running <code class=\"language-text\">$ npm i --save-dev gulp gulp-sass gulp-autoprefixer gulp-sourcemaps gulp-watch critical</code>.</p>\n<p>Once the packages are done downloading, we need to set up our Gulpfile. Create a file in the root of your project named Gulpfile.js. Mine looks like this:</p>\n<p>{% highlight javascript linenos %}\n// Require Gulp\nvar gulp = require(‘gulp’);\nvar sass = require(‘gulp-sass’);\nvar sourcemaps = require(‘gulp-sourcemaps’);\nvar prefix = require(‘gulp-autoprefixer’);\nvar watch = require(‘gulp-watch’);\nvar critical = require(‘critical’);</p>\n<p>// Gulp Sass Task\ngulp.task(‘sass’, function() {\ngulp.src(’_sass/*<em>/</em>.scss’)<br>\n.pipe(sourcemaps.init()) // Initializes sourcemaps\n.pipe(sass({\nerrLogToConsole: true,\noutputStyle: “compressed”\n}))\n.pipe(prefix(‘last 2 versions’, ’> 1%’, ‘ie 8’))\n.pipe(sourcemaps.write(‘./’)) // Writes sourcemaps into the CSS file\n.pipe(gulp.dest(‘css’));\n})</p>\n<p>gulp.task(‘critical’, function () {\ncritical.generate({\nbase: ‘./’,\nsrc: ’_site/index.html’,\ncss: ’_site/css/screen.css’,\ndest: ’_includes/critical.css’,\nwidth: 320,\nheight: 480,\nminify: true\n});\n});</p>\n<p>gulp.task(‘watch’, function() {\ngulp.watch(’_sass/*<em>/</em>.scss’, [‘sass’])\n})</p>\n<p>gulp.task(‘default’, [‘sass’, ‘watch’]);\n{% endhighlight %}</p>\n<p>So what we have here, is two tasks, one to compile our Sass, the other to build our critical styles. The Gulp task for our Sass will watch any files in the <code class=\"language-text\">_sass</code> directory, and write them to the <code class=\"language-text\">css</code> folder. This means that we’re not using Jekyll’s ability to process Sass as part of the build. We’re going to be watching and compiling our Sass outside of Jekyll.</p>\n<h3>Jekyll files</h3>\n<p>With out Gulp set up to compile our Sass into CSS and generate our critical CSS, we need to adjust our Jekyll templates. What we want to do is line both the critical CSS as well as the loadCSS javascript function. LoadCSS.js is so small that it makes sense to inline it rather than create another http request. In order to do this, we need to place loadCSS.js into the <code class=\"language-text\">_includes</code> folder of our Jekyll site. Since our Gulp task is creating our critical styles for us, we just need to include the file in our templates. We then need to load our CSS in the footer of our site. It looks something like this (notice the {% include critical.css %}).</p>\n<p>head.html\n{% highlight html linenos %}</p>\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>{% if page.title %}{{ page.title }}{% else %}{{ site.title }}{% endif %}</title>\n  <meta name=\"description\" content=\"{% if page.excerpt %}{{ page.excerpt | strip_html | strip_newlines | truncate: 160 }}{% else %}{{ site.description }}{% endif %}\">\n  <!-- Inline critical css -->\n  <style type=\"text/css\">{{ \"{% include critical.css \"}}%}</style>\n  <link rel=\"canonical\" href=\"{{ page.url | replace:'index.html','' | prepend: site.baseurl | prepend: site.url }}\">\n  <link rel=\"alternate\" type=\"application/rss+xml\" title=\"{{ site.title }}\" href=\"{{ \"/feed.xml\" | prepend: site.baseurl | prepend: site.url }}\" />\n  <link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\" />\n  <!--[if lt IE 9]>\n    <script src=\"{{ \"js/html5shiv.js\" | prepend: site.baseurl }}\"></script>\n  <![endif]-->\n  <!-- Load CSS -->\n  <script type=\"text/javascript\">{{ \"{% include loadCSS.js \"}}%}</script>\n</head>\n{% endhighlight %}\n<p>footer.html\n{% highlight html linenos %}</p>\n<footer class=\"site-footer\">\n  <div class=\"container\">\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div class=&quot;footer-col-wrapper&quot;&gt;\n  &lt;div class=&quot;footer-col footer-col-1&quot;&gt;\n    &lt;ul class=&quot;contact-list&quot;&gt;\n      &lt;li&gt;&lt;a href=&quot;mailto:{{ site.email }}&quot;&gt;{{ site.email }}&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;{{ site.description }}&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n\n  &lt;div class=&quot;footer-col footer-col-2&quot;&gt;\n    &lt;p class=&quot;copyright&quot;&gt;Built with &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jeykll&lt;/a&gt;. Hosted on &lt;a href=&quot;http://github.com/drewbolles/drewbolles-jekyll&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;br&gt;&amp;copy; Copyright 2015 All Rights Reserved&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre></div>\n  </div>\n</footer>\n<!-- Loadd css -->\n<script>\n  loadCSS('/css/screen.css', false, 'screen');\n</script>\n<noscript>\n  <link rel=\"stylesheet\" href=\"/css/screen.css\">\n</noscript>\n{% endhighlight %}\n<h3>Workflow</h3>\n<p>Once our Gulpfile.js is set up, we basically have everything we need. The workflow becomes a bit more complicated, though, since we have to watch for both Sass AND Jekyll changes, and I’ve not set up the Gulp file to do both.</p>\n<p>For simplicity sake, what I do is have multiple terminal windows running, three to be exact. I use iTerm2 and it’s split-pane feature. My top pane is for my git / bower / vim commands. I then have a pane below running <code class=\"language-text\">$ gulp</code> and another pane below that running <code class=\"language-text\">$ jekyll serve</code>. Any time I make a change to my Sass, Gulp outputs a new CSS file, which Jekyll picks up and rebuilds its static content from. It’s one more watch step, but it’s fast and simple.</p>\n<p>Once I’m ready to push my changes to the repo, I generate my critical CSS. I do this by running <code class=\"language-text\">$ gulp critical</code>. Once the task is done a file is created at <code class=\"language-text\">_includes/critical.css</code>. We include this in a commit, and push it to the repo (on the gh-pages branch or master for orgs, etc). GitHub pages works its magic and builds our site out with our crictcal CSS inline!</p>\n<h2>Results</h2>\n<p>Once we have our Gulp file set up to build our Sass and critical CSS, and our Jekyll files are using our new assets, we can sit back and enjoy good performance results. Head on over to <a href=\"https://developers.google.com/speed/pagespeed/insights/\">Google’s pagespeed insights</a> and run your site through it’s test. It should report back that you’ve done everything correctly!</p>","frontmatter":{"title":"Inline your critical CSS using Jekyll and Gulp","date":"Invalid date"}}},"pageContext":{"slug":"/blog/NaN/NaN/NaN/inline-critical-css-using-jekyll-and-gulp/","previous":{"fields":{"slug":"/blog/2014/09/01/joining-chapter-three/"},"frontmatter":{"title":"I'm joining Chapter Three!"}},"next":{"fields":{"slug":"/blog/NaN/NaN/NaN/getting-started-with-drupal-8-theming/"},"frontmatter":{"title":"Getting started with Drupal 8 Theming"}}}}